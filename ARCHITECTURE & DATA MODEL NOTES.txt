ARCHITECTURE

src/
  App.tsx                          // layout/shell
  store/                           // Zustand, pure serializable state
    project.ts                     // Project state + actions (add instrument, etc.)
    selection.ts                   // UI selections (which tool, snap, etc.)
  audio/                           // Tone.js lives here only
    engine.ts                      // start/stop, create nodes from state, schedule clips
    nodes/                         // synth.ts, drums.ts, mixer.ts (Tone node builders)
    render.ts                      // offline render to WAV (stretch)
  components/
    rack/InstrumentRack.tsx        // add/remove instruments, open editors
    editor/PianoRoll.tsx           // note grid + snap handling
    editor/StepSequencer.tsx       // 16-step grid + rows
    playlist/Playlist.tsx          // timeline & clip interactions
    mixer/Mixer.tsx                // 8 channels + master
    transport/Transport.tsx        // play/stop, tempo, snap menu
  utils/
    grid.ts                        // math for snap (1, 1/2, 1/4 beat)
    io.ts                          // save/load JSON

EXTENDED ARCHITECTURE FOR LATER

mini-daw/
├─ public/
│  └─ samples/                     # built-in WAVs (kick, snare, hats…); served as /samples/…
│
├─ src/
│  ├─ App.tsx                      # app shell/layout (renders panels)
│  ├─ main.tsx                     # Vite/React entry
│  ├─ types.ts                     # JSON-serializable app types (Project, Instrument, Pattern, Clip, Mixer)
│  │
│  ├─ store/                       # Zustand stores (PLAIN DATA ONLY; no Tone here)
│  │  ├─ project.ts                # project state: bpm, instruments, patterns, clips, mixer; actions (add/update)
│  │  ├─ selection.ts              # UI selections: selected instrument/pattern, snap, panel visibility
│  │  ├─ samples.ts                # (optional) sample catalog + user uploads (object URLs, metadata)
│  │  └─ ui.ts                     # (optional) layout prefs (theme, panel sizes)
│  │
│  ├─ audio/                       # Tone.js lives ONLY here
│  │  ├─ engine.ts                 # start/stop/setTempo; applyProject(); updatePattern(); reschedule(); routing
│  │  ├─ preview.ts                # lightweight one-shot player for browser preview (decoupled from Transport)
│  │  ├─ render.ts                 # (stretch) offline WAV export with Tone.Offline
│  │  └─ nodes/                    # small builders for audio nodes (no React imports)
│  │     ├─ synth.ts               # buildSynth(params) → Tone.Synth/PolySynth
│  │     ├─ drums.ts               # buildDrumKit(params) → kick/snare/hat Players or Synths
│  │     ├─ sampler.ts             # buildSampler(sampleUrl|mapping) → Tone.Player/Sampler
│  │     └─ mixer.ts               # buildMixer(channels) → Tone.Channel[], limiter on master
│  │
│  ├─ components/                  # UI (React). Talks to store + engine’s small API
│  │  ├─ transport/
│  │  │  └─ Transport.tsx          # Enable Audio, Play/Stop, Tempo, Snap menu, Save/Load buttons
│  │  ├─ rack/
│  │  │  ├─ InstrumentRack.tsx     # list/add/remove instruments; select active; set mixerChannel
│  │  │  └─ InstrumentCard.tsx     # (optional) per-instrument controls (volume/pan/osc/preset)
│  │  ├─ editor/
│  │  │  ├─ StepSequencer.tsx      # drums grid editor (pads × steps) for selected pattern
│  │  │  ├─ PianoRoll.tsx          # simple grid piano roll (current version)
│  │  │  └─ NoteCanvas.tsx         # (stretch) FL-style: scrollable, draggable/resize notes (Canvas)
│  │  ├─ patterns/
│  │  │  ├─ PatternList.tsx        # create/rename/duplicate/delete patterns; choose activePatternId
│  │  │  └─ PatternEditor.tsx      # switches between PianoRoll/StepSequencer based on pattern.kind
│  │  ├─ playlist/
│  │  │  └─ Playlist.tsx           # arrange clips (patternId instances) on 0–16 bars; snap-aware
│  │  ├─ mixer/
│  │  │  └─ Mixer.tsx              # 8 channels + master; volume sliders, simple meters (optional)
│  │  ├─ browser/
│  │  │  └─ SampleBrowser.tsx      # list/search/preview samples; drag → rack/pads; “Add samples…” (file input)
│  │  └─ common/
│  │     ├─ Panel.tsx              # (optional) titled panel wrapper
│  │     ├─ Slider.tsx             # (optional) shared slider
│  │     └─ Knob.tsx               # (optional) shared knob
│  │
│  ├─ utils/
│  │  ├─ grid.ts                   # snap math: beats↔pixels, quantize (Beat, 1/2, 1/4)
│  │  ├─ midi.ts                   # note ↔ midi ↔ name helpers; octave ranges
│  │  ├─ io.ts                     # save/load project JSON; (optional) cloud wiring later
│  │  ├─ files.ts                  # sample file handling: pick files, create object URLs, read duration
│  │  └─ dnd.ts                    # (optional) drag/drop helpers (sample→rack, sample→pad)
│  │
│  └─ hooks/
│     ├─ useHotkeys.ts             # (optional) keyboard shortcuts (space=play, del=delete note)
│     └─ useResizeObserver.ts      # (optional) resize-aware canvases/panels
│
├─ .gitignore
├─ package.json
└─ vite.config.ts


DATA MODEL (what to save in JSON)

// Project root
export interface Project {
  id: string;
  name: string;
  bpm: number;          // 60–180
  timeSig: "4/4";       // fixed for now
  instruments: Instrument[];
  patterns: Pattern[];  // reusable patterns
  playlist: Clip[];     // arrangement of pattern instances
  mixer: Mixer;
}

// Instruments
export type InstrumentType = "synth" | "drums";
export interface Instrument {
  id: string;
  name: string;
  type: InstrumentType;
  mixerChannel: number | "master"; // 1..8 or master
  // parameters stored as plain data (no Tone nodes)
  params: SynthParams | DrumParams;
  // which pattern is being edited right now (UI helper)
  activePatternId?: string;
}

export interface SynthParams {
  osc: "sine" | "sawtooth" | "square" | "triangle";
  adsr: { a: number; d: number; s: number; r: number };
  filter: { cutoff: number; q: number };
  volume: number;  // -60..0 dB
  pan: number;     // -1..1
}
export interface DrumParams {
  pads: Array<{ name: string; sampleUrl: string; volume: number }>;
}

// Patterns
export interface Pattern {
  id: string;
  instrumentId: string;    // owner instrument
  kind: "piano" | "steps";
  bars: 1 | 2 | 4;
  // Piano roll notes (beats are fractional in 16th increments)
  notes?: Array<{ pitch: string; startBeats: number; durBeats: number; vel: number }>;
  // Step sequencer grid: rows = pads, cols = 16 * bars
  steps?: boolean[][];
}

// Playlist clips (instances of patterns on timeline)
export interface Clip {
  id: string;
  patternId: string;
  instrumentId: string; // redundant but handy
  startBeats: number;   // snapped
  lengthBeats: number;  // equals pattern length (4, 8, or 16)
}

// Mixer
export interface Mixer {
  channels: Array<{ id: number; name: string; volumeDb: number }>; // 1..8
  master: { volumeDb: number };
}